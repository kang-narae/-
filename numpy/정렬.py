import numpy as np


'''
sort 함수나 메서드를 사용하여 배열 안의 원소를 크기에 따라 정렬하여 새로운 배열을 만들 수도 있다.
 2차원 이상인 경우에는 행이나 열을 각각 따로따로 정렬하는데 axis 인수를 사용하여 행을 정렬할 것인지 열을 정렬한 것인지 결정한다. 
 axis=0이면 행을 재정렬 axis=1이면 열을 재정렬. 
디폴트 값은 -1 즉 가장 안쪽, (나중)의 차원이다.   --- ??

'''

a = np.array([[4,  3,  5,  7],
              [1, 12, 11,  9],
              [2, 15,  1, 14]])

np.sort(a, axis=-1)  # 디폴트는 axis=-1 . 가장 바깥.     근데 여기서는 axis=1 과 동일 (0,1 두개 있는데 1이 행인거지)
np.sort(a, axis=1)  # 디폴트는 axis=-1 . 가장 바깥.     근데 여기서는 axis=1 과 동일 (0,1 두개 있는데 1이 행인거지)
'''
array([[ 3,  4,  5,  7],
       [ 1,  9, 11, 12],
       [ 1,  2, 14, 15]])'''   #행은 그대로인데 열을 재배열.


np.sort(a, axis=0)   # 열은 그대로인데 행을 재배열.
'''
array([[ 1,  3,  1,  7],
       [ 2, 12,  5,  9],
       [ 4, 15, 11, 14]])'''



b= np.array([  
    [   [3,5],[3,3],[234,7],[8,9]   ],
    [   [2,235],[423,53],[253,36],[235,75]   ],
    [   [12,34],[7,34],[643,34],[4,2]   ]
   ])               
   # 3깊이, 4행, 2열
#print(b.shape)


np.sort(b, axis=-1) #가장 안쪽, 가장 나중 차원?

'''[[[  3   5]
  [  3   3]
  [  7 234]
  [  8   9]]

 [[  2 235]
  [ 53 423]
  [ 36 253]
  [ 75 235]]

 [[ 12  34]
  [  7  34]
  [ 34 643]
  [  2   4]]]'''           # '동일한 행' 내에서


np.sort(b, axis=0)
'''
[[[  2   5]
  [  3   3]
  [234   7]
  [  4   2]]

 [[  3  34]
  [  7  34]
  [253  34]
  [  8   9]]

 [[ 12 235]
  [423  53]
  [643  36]
  [235  75]]]'''    #행과열은 그대로인데 깊이를 재정렬
#ex 75는 3덩어리(깊이)에서 2번째 깊이 중 4행2열.
#이게 3번째 깊이로 이동함.

np.sort(b, axis=1)
'''[[[  3   3]
  [  3   5]
  [  8   7]
  [234   9]]

 [[  2  36]
  [235  53]
  [253  75]
  [423 235]]

 [[  4   2]
  [  7  34]
  [ 12  34]
  [643  34]]]'''   
  #열 위치는 그대로인데 행 위치를 재배열


print(np.sort(b, axis=2))   #axis=-1이랑 같음
'''
[[[  3   5]
  [  3   3]
  [  7 234]
  [  8   9]]

 [[  2 235]
  [ 53 423]
  [ 36 253]
  [ 75 235]]

 [[ 12  34]
  [  7  34]
  [ 34 643]
  [  2   4]]]'''  # 가장 나중 차원이라는 건 가장 안쪽이라는 건... 열?  
  #동일한 행 내에서 열을 바꿈. 열 재정렬